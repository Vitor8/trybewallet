{"version":3,"sources":["reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","actions/index.js","pages/Login.js","components/HeaderTable.js","components/HeaderWallet.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","email","user","state","action","type","payload","currencies","expenses","wallet","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","saveCurrencies","Login","props","password","isDisabled","shouldRedirectToWallet","shouldEnableButton","bind","redirectToWallet","handleChange","target","this","setState","name","value","test","verifyEmail","length","saveEmail","className","htmlFor","id","data-testid","onChange","disabled","onClick","to","React","Component","connect","dispatch","userAction","HeaderTable","HeaderWallet","userEmail","totalExpense","currentCurrency","totalExpenseRound","Math","round","src","width","height","alt","Wallet","shouldRenderForm","description","chosenCurrency","method","tag","showCurrencies","removeExpense","newExpenses","filter","expense","forEach","expnseValue","exchangeRates","currency","ask","prevState","getCurrencies","addNewExpense","askToConvert","e","map","index","valueToConvert","exchangeRate","convertedValue","key","Object","keys","renderMethodAndTag","addExpense","renderHeader","renderForm","renderTable","a","fetch","response","json","newExpense","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e703efc5.chunk.js","sourcesContent":["// Esse reducer será responsável por tratar as informações da pessoa usuária\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => { // fica ouvindo todas as ações que são disparadas\n  switch (action.type) {\n  case 'LOGIN':\n    return {\n      email: action.payload,\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst wallet = (state = INITIAL_STATE, action) => { // fica ouvindo todas as ações que são disparadas\n  switch (action.type) {\n  case 'SAVE_CURRENCIES':\n    return {\n      ...state,\n      currencies: action.payload,\n    };\n  case 'ADD_EXPENSE':\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload],\n    };\n  case 'REMOVE_EXPENSE':\n    return {\n      ...state,\n      expenses: action.payload,\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","// Coloque aqui suas actions\n\nexport const login = (email) => ({\n  type: 'LOGIN',\n  payload: email,\n});\n\nexport const addExpense = (expense) => ({\n  type: 'ADD_EXPENSE',\n  payload: expense,\n});\n\nexport const removeExpense = (expense) => ({\n  type: 'REMOVE_EXPENSE',\n  payload: expense,\n});\n\nconst saveCurrencies = (currencies) => ({\n  type: 'SAVE_CURRENCIES',\n  payload: currencies,\n});\n\nexport const getCurrencies = () => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const currencies = await response.json();\n  dispatch(saveCurrencies(currencies)); // dispatch dispara ação\n};\n","import React from 'react';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as userAction from '../actions/index';\nimport '../css/Login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      isDisabled: true,\n      shouldRedirectToWallet: false,\n    };\n    this.shouldEnableButton = this.shouldEnableButton.bind(this);\n    this.redirectToWallet = this.redirectToWallet.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange({ target }) {\n    this.setState({ [target.name]: target.value }, () => this.shouldEnableButton());\n  }\n\n  verifyEmail(email) {\n    const emailRegex = /[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+/;\n    return emailRegex.test(email);\n  }\n\n  shouldEnableButton() {\n    const { email, password } = this.state;\n    const minValue = 6;\n    if (this.verifyEmail(email) && password.length >= minValue) {\n      return this.setState({ isDisabled: false });\n    }\n    return this.setState({ isDisabled: true });\n  }\n\n  redirectToWallet() {\n    const { saveEmail } = this.props;\n    const { email } = this.state;\n    saveEmail(email);\n    this.setState({\n      shouldRedirectToWallet: true,\n    });\n  }\n\n  render() {\n    const { isDisabled, shouldRedirectToWallet } = this.state;\n    return (\n      <div className=\"login-container\">\n        <label htmlFor=\"email\">\n          Email\n          <input\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            data-testid=\"email-input\"\n            onChange={ this.handleChange }\n            className=\"login-inputs\"\n          />\n        </label>\n        {' '}\n        <br />\n        {' '}\n        <br />\n        <label htmlFor=\"password\">\n          Senha\n          <input\n            name=\"password\"\n            type=\"password\"\n            id=\"password\"\n            data-testid=\"password-input\"\n            onChange={ this.handleChange }\n            className=\"login-inputs\"\n          />\n        </label>\n        {' '}\n        <br />\n        {' '}\n        <br />\n        <button\n          type=\"button\"\n          disabled={ isDisabled }\n          onClick={ () => this.redirectToWallet() }\n          className=\"button-login\"\n        >\n          Entrar\n        </button>\n        <span>{ shouldRedirectToWallet ? <Redirect to=\"/carteira\" /> : <div /> }</span>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({ // mapeia as minha ações que serão disparadas\n  saveEmail: (email) => dispatch(userAction.login(email)),\n});\n\nLogin.propTypes = {\n  saveEmail: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport '../css/Wallet.css';\n\nfunction HeaderTable() {\n  return (\n    <tr className=\"header-table\">\n      <th className=\"header-title\">Descrição</th>\n      <th className=\"header-title\">Tag</th>\n      <th className=\"header-title\">Método de pagamento</th>\n      <th className=\"header-title\">Valor</th>\n      <th className=\"header-title\">Moeda</th>\n      <th className=\"header-title\">Câmbio utilizado</th>\n      <th className=\"header-title\">Valor convertido</th>\n      <th className=\"header-title\">Moeda de conversão</th>\n      <th className=\"header-title\">Editar/Excluir</th>\n    </tr>\n  );\n}\n\nexport default HeaderTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/Wallet.css';\n\nfunction HeaderWallet({ userEmail, totalExpense, currentCurrency }) {\n  const linkLogo = 'https://res.cloudinary.com/crunchbase-production/image/upload/v7oifu5eirdxepzyg0p0';\n  const totalExpenseRound = Math.round(totalExpense * 100) / 100;\n  return (\n    <header className=\"header-wallet\">\n      <img\n        className=\"logo-header\"\n        src={ linkLogo }\n        width=\"45px\"\n        height=\"45px\"\n        alt=\"logo-trybe\"\n      />\n\n      <p data-testid=\"email-field\">\n        Email\n        <label htmlFor=\"userEmail\" className=\"data-header\">\n          { userEmail }\n        </label>\n      </p>\n      <p data-testid=\"total-field\">\n        Despesa Total\n        <label className=\"data-header\" htmlFor=\"totalExpense\">\n          { totalExpenseRound }\n        </label>\n      </p>\n      <p data-testid=\"header-currency-field\">\n        Câmbio Atual\n        <label className=\"data-header\" htmlFor=\"currentCurrency\">\n          { currentCurrency }\n        </label>\n      </p>\n    </header>\n  );\n}\n\nHeaderWallet.propTypes = {\n  userEmail: PropTypes.string.isRequired,\n  totalExpense: PropTypes.number.isRequired,\n  currentCurrency: PropTypes.string.isRequired,\n};\n\nexport default HeaderWallet;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as currenciesActions from '../actions/index';\nimport HeaderTable from '../components/HeaderTable';\nimport HeaderWallet from '../components/HeaderWallet';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalExpense: 0,\n      currentCurrency: 'BRL',\n      shouldRenderForm: false,\n      value: '',\n      description: '',\n      chosenCurrency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n    this.showCurrencies = this.showCurrencies.bind(this);\n  }\n\n  componentDidMount() {\n    this.showCurrencies();\n  }\n\n  removeExpense(id) {\n    const { expenses, removeExpense } = this.props;\n    const newExpenses = expenses.filter((expense) => expense.id !== id);\n    let totalExpense = 0;\n    newExpenses.forEach((expense) => {\n      const expnseValue = expense.value * expense.exchangeRates[expense.currency].ask;\n      totalExpense += expnseValue;\n    });\n    this.setState((prevState) => ({\n      ...prevState,\n      totalExpense,\n    }));\n    removeExpense(newExpenses);\n  }\n\n  showCurrencies() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n    this.setState({ shouldRenderForm: true });\n  }\n\n  addExpense() {\n    const { getCurrencies } = this.props;\n    getCurrencies(); // getCurrencies atualiza valor de currencies na store do redux\n    const { value, description, chosenCurrency, method, tag } = this.state;\n    const { currencies, addNewExpense, expenses } = this.props;\n    const newExpense = {\n      id: expenses.length,\n      value,\n      currency: chosenCurrency,\n      method,\n      tag,\n      description,\n      exchangeRates: currencies,\n    };\n    addNewExpense(newExpense);\n    const askToConvert = currencies[chosenCurrency].ask;\n    this.setState((prevState) => ({\n      ...prevState,\n      totalExpense: prevState.totalExpense + (value * askToConvert),\n    }));\n  }\n\n  renderMethodAndTag() {\n    return (\n      <div className=\"method-tag-wallet\">\n        <label htmlFor=\"pagamento\">\n          Método de pagamento\n          <select\n            id=\"pagamento\"\n            onChange={ (e) => this.setState({ method: e.target.value }) }\n            className=\"input-wallet-method\"\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Tag\n          <select\n            id=\"tag\"\n            onChange={ (e) => this.setState({ tag: e.target.value }) }\n            className=\"input-wallet-tag\"\n          >\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderTable() {\n    const { expenses } = this.props;\n    return (\n      <div>\n        <table className=\"table\">\n          <HeaderTable />\n          { expenses.map((expense, index) => {\n            const valueToConvert = expense.value;\n            const exchangeRate = expense.exchangeRates[expense.currency].ask;\n            const convertedValue = valueToConvert * exchangeRate;\n            return (\n              <tr key={ index } className=\"row-table\">\n                <td className=\"table-content\">{ expense.description }</td>\n                <td className=\"table-content\">{ expense.tag }</td>\n                <td className=\"table-content\">{ expense.method }</td>\n                <td className=\"table-content\">{ expense.value }</td>\n                <td className=\"table-content\">\n                  { expense.exchangeRates[expense.currency].name }\n                </td>\n                <td className=\"table-content\">\n                  { (Math.round(exchangeRate * 100) / 100) }\n                </td>\n                <td className=\"table-content\">\n                  {\n                    Math.round(convertedValue * 100) / 100\n                  }\n                </td>\n                <td className=\"table-content\">Real</td>\n                <td className=\"table-content\">\n                  <button\n                    value={ expense.id }\n                    type=\"button\"\n                    data-testid=\"delete-btn\"\n                    onClick={ () => this.removeExpense(expense.id, convertedValue) }\n                  >\n                    Deletar\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </table>\n      </div>\n    );\n  }\n\n  renderHeader() {\n    const { userEmail } = this.props;\n    const { totalExpense, currentCurrency } = this.state;\n    return (\n      <HeaderWallet\n        userEmail={ userEmail }\n        totalExpense={ totalExpense }\n        currentCurrency={ currentCurrency }\n      />\n    );\n  }\n\n  renderForm() {\n    const { currencies } = this.props;\n    return (\n      <form className=\"form-wallet\">\n        <label htmlFor=\"value\">\n          Valor\n          <input\n            id=\"value\"\n            type=\"text\"\n            name=\"valor\"\n            onChange={ (e) => this.setState({ value: e.target.value }) }\n            className=\"input-wallet-value\"\n          />\n        </label>\n        <label htmlFor=\"moeda\">\n          Moeda\n          <select\n            id=\"moeda\"\n            onChange={ (e) => this.setState({ chosenCurrency: e.target.value }) }\n            className=\"input-wallet-currency\"\n          >\n            { Object.keys(currencies).map((currency) => {\n              if (currency !== 'USDT' && currency !== 'DOGE') {\n                return (\n                  <option key={ currency } value={ currency }>{ currency }</option>\n                );\n              } return null;\n            }) }\n          </select>\n        </label>\n        { this.renderMethodAndTag() }\n        <label htmlFor=\"description\" className=\"label-wallet-description\">\n          <span>Descrição</span>\n          <textarea\n            id=\"description\"\n            type=\"text\"\n            name=\"description\"\n            onChange={ (e) => this.setState({ description: e.target.value }) }\n            className=\"input-wallet-description\"\n          />\n        </label>\n        <button type=\"button\" onClick={ () => this.addExpense() } className=\"button\">\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n\n  render() {\n    const { shouldRenderForm } = this.state;\n    const { expenses } = this.props;\n    return (\n      <div>\n        <span>{ this.renderHeader() }</span>\n        <span>{ !shouldRenderForm ? <p>Carregando...</p> : this.renderForm() }</span>\n        <div>\n          { expenses.length === 0 ? <div /> : this.renderTable() }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => { dispatch(currenciesActions.getCurrencies()); },\n  addNewExpense: (newExpense) => dispatch(currenciesActions.addExpense(newExpense)),\n  removeExpense: (newExpenses) => dispatch(currenciesActions.removeExpense(newExpenses)),\n});\n\nWallet.propTypes = {\n  userEmail: PropTypes.string.isRequired,\n  getCurrencies: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.object).isRequired,\n  addNewExpense: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  removeExpense: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store/index';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}